package MapEngine;

import Fauna.Animal;
import Fauna.Herbs;
import Fauna.AllHerbivores.Herbivores;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Cell {

    private final Coordinate coordinate;                  // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏
    private final List<Animal> animals = new ArrayList<>(); // –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –∫–ª–µ—Ç–∫–µ
    private final List<Herbs> plants  = new ArrayList<>();  // —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ –∫–ª–µ—Ç–∫–µ

    public Cell(Coordinate coordinate) {
        this.coordinate = coordinate;
    }

    /** –î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∫–ª–µ—Ç–∫—É */
    public void addAnimal(Animal animal) {
        if (animal == null) return;

        // üîπ –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö —ç—Ç–æ–≥–æ –∂–µ –≤–∏–¥–∞ —É–∂–µ –≤ –∫–ª–µ—Ç–∫–µ
        long sameTypeCount = animals.stream()
                .filter(a -> a.getClass() == animal.getClass())
                .count();

        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if (sameTypeCount >= animal.getMaxCountOnCell()) {
            // –∫–ª–µ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ —ç—Ç–∏–º –≤–∏–¥–æ–º ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
            return;
        }

        animals.add(animal);
        animal.setPosition(coordinate);
    }

    /** –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–ª–µ—Ç–∫—É */
    public void addPlant(Herbs herb) {
        if (herb != null) {
            plants.add(herb);
        }
    }

    /** –î–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—Ç–µ–Ω–∏—è–º (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è) */
    public List<Herbs> getPlants() {
        return plants;
    }

    /** –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–ª–µ—Ç–∫–µ */
    public List<Animal> getAnimals() {
        return animals;
    }

    /** –û–¥–∏–Ω —Ü–∏–∫–ª –∂–∏–∑–Ω–∏ –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ */
    public void liveCycle(Island island) {
        // 1Ô∏è‚É£ ‚Äî –ï–¥–∞
        for (Animal animal : new ArrayList<>(animals)) {
            if (!animal.isAlive()) continue;

            if (animal instanceof Herbivores herbivore) {
                // –¢—Ä–∞–≤–æ—è–¥–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞—é—Ç—Å—è —Å—ä–µ—Å—Ç—å —Ç—Ä–∞–≤—É
                boolean ate = herbivore.tryEatPlants(plants);
                if (!ate) {
                    herbivore.eat(animals);
                }
            } else {
                animal.eat(animals);
            }
        }

        // 2Ô∏è‚É£ ‚Äî –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
        List<Animal> newborns = new ArrayList<>();
        for (Animal animal : animals) {
            if (animal.isAlive()) {
                List<Animal> sameSpecies = animals.stream()
                        .filter(a -> a.getClass() == animal.getClass() && a.isAlive())
                        .toList();
                Animal child = animal.reproduce(sameSpecies);
                if (child != null) {
                    newborns.add(child);
                }
            }
        }
        animals.addAll(newborns);

        // 3Ô∏è‚É£ ‚Äî –ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ (–±–µ–∑ ConcurrentModification)
        List<Animal> toMove = new ArrayList<>();

        for (Animal animal : new ArrayList<>(animals)) {
            if (!animal.isAlive()) continue;

            Coordinate oldPos = animal.getPosition();
            animal.move(island);
            Coordinate newPos = animal.getPosition();

            // –ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–æ—Å—å
            if (oldPos.x != newPos.x || oldPos.y != newPos.y) {
                toMove.add(animal);
            }
        }

// –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
        for (Animal animal : toMove) {
            animals.remove(animal); // —É–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–ª–µ—Ç–∫–∏
            Cell newCell = island.getCell(animal.getPosition().x, animal.getPosition().y);
            if (newCell != null) {
                newCell.addAnimal(animal);
            }
        }



        // 4Ô∏è‚É£ ‚Äî –°—Ç–∞—Ä–µ–Ω–∏–µ –∏ —Å–º–µ—Ä—Ç—å
        Iterator<Animal> iterator = animals.iterator();
        while (iterator.hasNext()) {
            Animal a = iterator.next();
            a.liveCycle(island); // –≤—ã–∑—ã–≤–∞–µ—Ç –∏ —Å—Ç–∞—Ä–µ–Ω–∏–µ, –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–º–µ—Ä—Ç–∏
            if (!a.isAlive()) {
                iterator.remove();
            }
        }
    }

    public Coordinate getCoordinate() {
        return coordinate;
    }
}
