package MapEngine;

import Fauna.Animal;
import Fauna.Herbs;

public class Island {

    private final int width;
    private final int height;
    private final Cell[][] cells;

    public Island(int width, int height) {
        this.width = width;
        this.height = height;
        this.cells = new Cell[height][width];

        // —Å–æ–∑–¥–∞—ë–º –∫–ª–µ—Ç–∫–∏
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                cells[y][x] = new Cell(new Coordinate(x, y));
            }
        }
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º */
    public Cell getCell(int x, int y) {
        if (x < 0 || y < 0 || x >= width || y >= height) return null;
        return cells[y][x];
    }

    /** –°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ (–≤—Å–µ –∫–ª–µ—Ç–∫–∏ "–∂–∏–≤—É—Ç") */
    public void simulateStep() {
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                cells[y][x].liveCycle(this);
            }
        }
    }

    /** –î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º */
    public void addAnimal(Animal animal, int x, int y) {
        Cell cell = getCell(x, y);
        if (cell != null) {
            cell.addAnimal(animal);
            animal.setPosition(new Coordinate(x, y)); // üü¢ —Ñ–∏–∫—Å: –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        }
    }

    /** –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º */
    public void addPlant(Herbs herb, int x, int y) {
        cells[y][x].addPlant(herb);
    }

    /** –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Å—Ç—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏ */
    public void printMap() {
        System.out.println("\n===== ISLAND MAP =====");

        for (int y = 0; y < height; y++) {
            StringBuilder row = new StringBuilder();

            for (int x = 0; x < width; x++) {
                Cell cell = cells[y][x];

                if (!cell.getAnimals().isEmpty()) {
                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –∫–ª–µ—Ç–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    String symbol = getAnimalSymbol(cell.getAnimals().get(0));
                    row.append(symbol).append(" ");
                } else if (!cell.getPlants().isEmpty()) {
                    row.append("üåø "); // —Ç—Ä–∞–≤–∞
                } else {
                    row.append("‚¨ú "); // –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
                }
            }

            System.out.println(row);
        }
    }

    /** –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ */
    private String getAnimalSymbol(Fauna.Animal animal) {
        return switch (animal.getName()) {
            case "Rabbit" -> "üêá";
            case "Fox" -> "ü¶ä";
            case "Wolf" -> "üê∫";
            case "Boa" -> "üêç";
            default -> "‚ùì";
        };
    }


    // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã Animal.move()
    public int getWidth() {
        return width;
    }

    public int getHeight() {
        return height;
    }
}
